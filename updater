#!/bin/bash

PARAM_1=$1
PARAM_2=$2
RCol='\e[0m';
Yel='\e[0;33m';
Red='\e[0;31m';
Gre='\e[0;32m';

# Función mejorada para --help
show_help() {
  cat << EOF
🔹 Ubuntu/Debian Updater 🔹
Automates system updates, upgrades, and cleanup tasks.

📌 Usage:
  ./updater [OPTION]

🛠️ Options:
  -u, --update           Update package lists (apt update).
  -g, --upgrade          Upgrade installed packages (apt upgrade -y).
  -a, --autoremove       Remove unused packages (apt autoremove -y).
  -c, --clean            Clean package cache (apt clean).
  -f, --full             Perform all actions: update, upgrade, autoremove, and clean.
  -h, --help             Show this help message.
  -v, --version          Show script version.

📋 Examples:
  ./updater --full       # Full system update + upgrade + cleanup.
  ./updater --update     # Only update package lists.
  ./updater -ug          # Update and upgrade (no cleanup).

🔗 Repository: https://github.com/alexperezortuno/ubuntu-updater
EOF
}

show_commands() {
    cat << EOF
    📚 Available Commands

    🔧 System Maintenance
    (no args)   Update, upgrade and clean all
    clean       Clean downloaded .deb packages from cache
    cache:stats Show cache statistics

    📦 Package Management
    package:install <pkg>      Install a package
    package:installed          List installed packages
    package:upgrade <pkg>      Upgrade specific package
    package:remove <pkg>       Remove a package
    package:find <pkg>         Search for a package
    package:download <pkg>     Download package source code
    package:dependencies <pkg> Check package dependencies
    package:description <pkg>  Show package description
    package:descriptions       List all packages with descriptions

    🔄 PPA Management$
    ppa:list          List configured PPAs
    ppa:install <ppa> Add a PPA
    ppa:remove <ppa>  Remove a PPA

    💾 Memory Management$
    memory:info     Show memory information
    freemem         Free up memory
    killport <port> Kill process using a port

    💡 Tip: Replace <pkg> with package name and <ppa> with PPA path
EOF
}

case "$PARAM_1" in
    "clean")
      echo -e "${Yel}";
      sudo apt autoremove; sudo apt clean; sudo apt autoclean
      echo -e "${RCol}";
    ;;
    "package:remove")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Removing package ${PARAM_2}${RCol}\n";
        sudo apt remove --purge "$PARAM_2"
        sudo apt autoremove
        sudo apt clean
      else
        echo -e "${Yel}Please tell me what package you want to remove${RCol}\n";
        exit 1
      fi
    ;;
    "package:install")
      sudo apt install "${PARAM_2}"
    ;;
    "package:upgrade")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Installing package ${PARAM_2}${RCol}\n";
        sudo apt install "$PARAM_2" --only-upgrade
      else
        echo -e "${Red}Please tell me what package you need information${RCol}\n";
        exit 1
      fi
    ;;
    "package:installed")
      sudo apt list --installed | less
    ;;
    "package:find")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        sudo apt list --installed | grep -i "$PARAM_2"
      else
        echo -e "${Red}Please tell me what package you need to find${RCol}\n";
        exit 1
      fi
    ;;
    "package:description")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        apt-cache show "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need information${RCol}\n";
        exit 1
      fi
    ;;
    "package:descriptions")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        apt-cache search "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need to find${RCol}\n";
        exit 1
      fi
    ;;
    "package:dependencies")
      if [[ "$PARAM_2" != "" ]]
      then
        apt-cache showpkg "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need to see${RCol}\n";
        exit 1
      fi
    ;;
    "package:download")
      if [[ "$PARAM_2" != "" ]]
      then
        sudo apt-get --download-only source "$PARAM_2"
      else
        echo -e "${Red}Please tell me what package needs to download${RCol}\n";
        exit 1
      fi
    ;;
    "package:list")
      dpkg --list
    ;;
    "ppa:list")
      apt policy
    ;;
    "ppa:install")
        if [[ "$PARAM_2" != "" ]]
        then
            sudo add-apt-repository ppa:"$PARAM_2" -y
            sudo apt update
        else
            echo -e "${Red}Please need a PPA ${RCol}\n";
            exit 1
        fi
    ;;
    "ppa:remove")
        if [[ "$PARAM_2" != "" ]]
        then
            sudo add-apt-repository --remove ppa:"$PARAM_2" -y
            sudo apt update
        else
            echo -e "${Red}Please tell me what ppa needs remove${RCol}\n";
            exit 1
        fi
    ;;
    "cache:stats")
      apt-cache stats
    ;;
    "memory:info")
      if [[ "$PARAM_2" != "" ]]
      then
        sudo dmidecode --type 17 | more
      else
        # sudo dmidecode --type 17
        # sudo lshw -short -C memory
        sudo dmidecode --type 17  | grep -i speed
      fi
    ;;
    "killport")
        echo -e "${Yel}Please write port to kill:  ${RCol}\r"
        read -r PORT
        sudo kill -9 "$(sudo lsof -t -i:"${PORT}")"
    ;;
    "freemem")
        free -h
        su -c "echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'" root
        # echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'
        free -h
    ;;
    -h|--help)
        show_help
    ;;
    -l|--list)
      show_commands
    ;;
    *)
      echo -e "${Yel} Updating packages ${RCol}";
      sudo apt update; apt list --upgradable && sudo apt upgrade -y && sudo apt autoremove; sudo apt clean; sudo apt autoclean
    ;;
esac

exit 0
