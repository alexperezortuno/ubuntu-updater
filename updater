#!/bin/bash

PARAM_1=$1
PARAM_2=$2
# Colors
RCol='\033[0m'    # Text Reset
Red='\033[0;31m'  # Red
Gre='\033[0;32m'  # Green
Yel='\033[0;33m'  # Yellow
Blu='\033[0;34m'  # Blue

show_commands() {
    cat << EOF
    üîπ Ubuntu/Debian Updater üîπ
    Automates system updates, upgrades, and cleanup tasks.

    üìå Usage:
      updater [OPTION]

    üõ†Ô∏è Options:
      -h, --help             Show this help message.
      -v, --version          Show script version.

    üîß System Maintenance
    (no args)   Update, upgrade and clean all

    üìö Available options

    clean       Clean downloaded .deb packages from cache
    cache:stats Show cache statistics

    üì¶ Package Management
    pkg:install [PACKAGE]      Install a package
    pkg:installed              List installed packages
    pkg:upgrade [PACKAGE]      Upgrade specific package
    pkg:remove [PACKAGE]       Remove a package
    pkg:find [PACKAGE]         Search for a package
    pkg:download [PACKAGE]     Download package source code
    pkg:dependencies [PACKAGE] Check package dependencies
    pkg:description [PACKAGE]  Show package description
    pkg:descriptions           List all packages with descriptions

    üîÑ PPA Management
    ppa:list          List configured PPAs
    ppa:install [PPA] Add a PPA
    ppa:remove [PPA]  Remove a PPA

    üíæ Memory Management
    freemem         Free up memory

    üìä Monitoring
    sys-info        Show system information
    disk-usage      Show disk usage by partition
    memory-info     Show detailed memory usage

    üõ°Ô∏è Security
    ufw-status       Show UFW status
    ports-list       List open ports and associated services
    check-updates    Check for security updates
    killport <port>  Kill process using a port

    ‚öôÔ∏è Services
    service-list          List active services
    service-restart <srv> Restart a service

    üí° Tip: Replace [PACKAGE] with package name and [PPA] with PPA path
    üîó Repository: https://github.com/alexperezortuno/ubuntu-updater
EOF
}

case "$PARAM_1" in
    -v|--version)
        echo -e "${Yel}Version 1.0.0${RCol}\n";
    ;;
    "clean")
      echo -e "${Yel}";
      sudo apt autoremove; sudo apt clean; sudo apt autoclean
      echo -e "${RCol}";
    ;;
    "package:remove")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Removing package ${PARAM_2}${RCol}\n";
        sudo apt remove --purge "$PARAM_2"
        sudo apt autoremove
        sudo apt clean
      else
        echo -e "${Yel}Please tell me what package you want to remove${RCol}\n";
        exit 1
      fi
    ;;
    "package:install")
      sudo apt install "${PARAM_2}"
    ;;
    "package:upgrade")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Installing package ${PARAM_2}${RCol}\n";
        sudo apt install "$PARAM_2" --only-upgrade
      else
        echo -e "${Red}Please tell me what package you need information${RCol}\n";
        exit 1
      fi
    ;;
    "package:installed")
      sudo apt list --installed | less
    ;;
    "package:find")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        sudo apt list --installed | grep -i "$PARAM_2"
      else
        echo -e "${Red}Please tell me what package you need to find${RCol}\n";
        exit 1
      fi
    ;;
    "package:description")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        apt-cache show "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need information${RCol}\n";
        exit 1
      fi
    ;;
    "package:descriptions")
      if [[ "$PARAM_2" != "" ]]
      then
        echo -e "${Yel}Finding package ${PARAM_2}${RCol}\n";
        apt-cache search "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need to find${RCol}\n";
        exit 1
      fi
    ;;
    "package:dependencies")
      if [[ "$PARAM_2" != "" ]]
      then
        apt-cache showpkg "$PARAM_2" | less
      else
        echo -e "${Red}Please tell me what package you need to see${RCol}\n";
        exit 1
      fi
    ;;
    "package:download")
      if [[ "$PARAM_2" != "" ]]
      then
        sudo apt-get --download-only source "$PARAM_2"
      else
        echo -e "${Red}Please tell me what package needs to download${RCol}\n";
        exit 1
      fi
    ;;
    "package:list")
      dpkg --list
    ;;
    "ppa:list")
      apt policy
    ;;
    "ppa:install")
        if [[ "$PARAM_2" != "" ]]
        then
            sudo add-apt-repository ppa:"$PARAM_2" -y
            sudo apt update
        else
            echo -e "${Red}Please need a PPA ${RCol}\n";
            exit 1
        fi
    ;;
    "ppa:remove")
        if [[ "$PARAM_2" != "" ]]
        then
            sudo add-apt-repository --remove ppa:"$PARAM_2" -y
            sudo apt update
        else
            echo -e "${Red}Please tell me what ppa needs remove${RCol}\n";
            exit 1
        fi
    ;;
    "cache:stats")
      apt-cache stats
    ;;
    "memory:info")
      if [[ "$PARAM_2" != "" ]]
      then
        sudo dmidecode --type 17 | more
      else
        # sudo dmidecode --type 17
        # sudo lshw -short -C memory
        sudo dmidecode --type 17  | grep -i speed
      fi
    ;;
    "killport")
        echo -e "${Yel}Please write port to kill:  ${RCol}\r"
        read -r PORT
        sudo kill -9 "$(sudo lsof -t -i:"${PORT}")"
    ;;
    "freemem")
        free -h
        su -c "echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'" root
        # echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && printf '\n%s\n' 'Ram-cache and Swap Cleared'
        free -h
    ;;
    "fix-broken")
      echo -e "${Gre}Fixing broken packages...${RCol}"
      sudo apt --fix-broken install
    ;;
    "kernel-clean")
      echo -e "${Gre}Cleaning old kernels...${RCol}"
      sudo apt purge $(dpkg -l | awk '/^ii linux-image-*/{print $2}' | grep -v $(uname -r))
    ;;
    "repo-check")
      echo -e "${Gre}Checking repository sources...${RCol}"
      sudo apt update 2>&1 | grep -i "failed\|error"
    ;;
    "pkg-search")
      [ -z "$2" ] && echo -e "${Red}Error: Package name required${RCol}" && exit 1
      apt search "$2"
    ;;
    "sys-info")
      echo -e "${Gre}System Information:${RCol}"
      echo -e "Hostname: $(hostname)"
      echo -e "Uptime: $(uptime -p)"
      echo -e "OS: $(lsb_release -d | cut -f2-)"
      echo -e "Kernel: $(uname -r)"
      echo -e "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
    ;;
    "service-list")
      systemctl list-unit-files --type=service --state=enabled
    ;;
    "service-restart")
      [ -z "$2" ] && echo -e "${Red}Error: Service name required${RCol}" && exit 1
      sudo systemctl restart "$2"
    ;;
    "ufw-status")
      sudo ufw status verbose
    ;;
    "ports-list")
      sudo ss -tulnp
    ;;
    "disk-usage")
      df -h
    ;;
    "memory-info")
      echo -e "${Gre}Memory Information:${RCol}"
      echo -e "Total Memory: $(free -h | grep 'Mem' | awk '{print $2}')"
      echo -e "Used Memory: $(free -h | grep 'Mem' | awk '{print $3}')"
      echo -e "Free Memory: $(free -h | grep 'Mem' | awk '{print $4}')"
    ;;
    -h|--help)
        show_commands
    ;;
    *)
      echo -e "${Yel} Updating packages ${RCol}";
      sudo apt update; apt list --upgradable && sudo apt upgrade -y && sudo apt autoremove; sudo apt clean; sudo apt autoclean
    ;;
esac

exit 0
